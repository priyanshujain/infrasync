package tfimport

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

type importer struct {
	outputPath string
}

// New creates a new terraform generator
func New(outputPath string, projectIDs []string) (TerraformGenerator, error) {
	if outputPath == "" {
		return nil, fmt.Errorf("output path cannot be empty")
	}

	// check if output path is a relative path
	if !filepath.IsAbs(outputPath) {
		abspath, err := filepath.Abs(outputPath)
		if err != nil {
			return nil, fmt.Errorf("failed to get absolute path for output: %w", err)
		}
		outputPath = abspath
	}

	if _, err := os.Stat(outputPath); os.IsNotExist(err) {
		// Create the directory
		if err := os.MkdirAll(outputPath, 0755); err != nil {
			return nil, fmt.Errorf("failed to create output directory: %w", err)
		}
	}

	// Generate provider configuration
	if err := generateProviderConfig(outputPath); err != nil {
		return nil, fmt.Errorf("failed to generate provider config: %w", err)
	}

	// Generate main.tf
	if err := generateMainTF(outputPath); err != nil {
		return nil, fmt.Errorf("failed to generate main.tf: %w", err)
	}

	// Generate variables.tf
	if err := generateVariablesTF(projectIDs, outputPath); err != nil {
		return nil, fmt.Errorf("failed to generate variables.tf: %w", err)
	}

	return &importer{
		outputPath: outputPath,
	}, nil
}

func generateProviderConfig(outputPath string) error {
	filePath := filepath.Join(outputPath, "providers.tf")
	// if file exists, do not overwrite
	if _, err := os.Stat(filePath); err == nil {
		return nil
	}

	// Build provider blocks
	var providerBlocks []string
	providerBlocks = append(providerBlocks, gcpProviderTemplate)

	content := fmt.Sprintf("# Generated by InfraSync\n\n%s", strings.Join(providerBlocks, "\n\n"))

	return os.WriteFile(filePath, []byte(content), 0644)
}

func generateMainTF(outputPath string) error {
	filePath := filepath.Join(outputPath, "main.tf")
	if _, err := os.Stat(filePath); err == nil {
		return nil
	}

	content := mainTemplate

	return os.WriteFile(filePath, []byte(content), 0644)
}

func generateVariablesTF(projectIDs []string, outputPath string) error {
	filePath := filepath.Join(outputPath, "variables.tf")
	if _, err := os.Stat(filePath); err == nil {
		return nil
	}

	// Build variables for each provider/project
	var variableBlocks []string
	for _, projectID := range projectIDs {
		varBlock := fmt.Sprintf(variableTemplate,
			"google",
			projectID,
			"Google Cloud",
			projectID)

		variableBlocks = append(variableBlocks, varBlock)
	}

	content := fmt.Sprintf("# Generated by InfraSync\n\n%s", strings.Join(variableBlocks, "\n\n"))

	return os.WriteFile(filePath, []byte(content), 0644)
}

// Template definitions
const (
	// Main template
	mainTemplate = `# Generated by InfraSync
# This file serves as the main entry point for this Terraform configuration

terraform {
  required_version = ">= 1.0.0"

  required_providers {
    google = {
      source  = "hashicorp/google"
      version = ">= 4.0.0"
    }
    # Add other providers as needed
  }
}
`

	// Variable template
	variableTemplate = `variable "%s_%s_project" {
  description = "The %s project ID for %s"
  type        = string
}
`

	// GCP provider template
	gcpProviderTemplate = `provider "google" {
  # Project and region variables will be set per-provider per-project
}

variable "gcp_region" {
  description = "Default GCP region"
  type        = string
  default     = "asia-south1"
}
`
)
