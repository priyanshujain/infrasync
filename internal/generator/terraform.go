package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/priyanshujain/infrasync/internal/config"
)

// TemplateData holds the data used in template generation
type TemplateData struct {
	Provider     string
	Project      string
	Service      string
	ResourceType string
	ResourceName string
	ResourceID   string
	Attributes   map[string]interface{}
}

// TerraformGenerator handles the generation of Terraform files
type TerraformGenerator struct {
	Config     *config.Config
	OutputPath string
}

// NewGenerator creates a new terraform generator
func NewGenerator(config *config.Config, outputPath string) *TerraformGenerator {
	return &TerraformGenerator{
		Config:     config,
		OutputPath: outputPath,
	}
}

// Generate creates all the terraform files for the given configuration
func (g *TerraformGenerator) Generate() error {
	// Create base directory structure
	if err := os.MkdirAll(g.OutputPath, 0755); err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	// Generate provider configuration
	if err := g.generateProviderConfig(); err != nil {
		return fmt.Errorf("failed to generate provider config: %w", err)
	}

	// Generate main.tf
	if err := g.generateMainTF(); err != nil {
		return fmt.Errorf("failed to generate main.tf: %w", err)
	}

	// Generate variables.tf
	if err := g.generateVariablesTF(); err != nil {
		return fmt.Errorf("failed to generate variables.tf: %w", err)
	}

	// Generate directory structure for each provider/project/service
	for providerName, provider := range g.Config.Providers {
		for _, project := range provider.Projects {
			for _, service := range project.Services {
				// Create import directory
				importDir := filepath.Join(g.OutputPath, "imports", providerName, project.ID, service)
				if err := os.MkdirAll(importDir, 0755); err != nil {
					return fmt.Errorf("failed to create import directory for %s/%s/%s: %w", 
						providerName, project.ID, service, err)
				}

				// Create resource directory
				resourceDir := filepath.Join(g.OutputPath, "resources", providerName, project.ID, service)
				if err := os.MkdirAll(resourceDir, 0755); err != nil {
					return fmt.Errorf("failed to create resource directory for %s/%s/%s: %w", 
						providerName, project.ID, service, err)
				}
			}
		}
	}

	return nil
}

// generateProviderConfig creates the providers.tf file
func (g *TerraformGenerator) generateProviderConfig() error {
	filePath := filepath.Join(g.OutputPath, "providers.tf")
	
	// Build provider blocks
	var providerBlocks []string
	
	for providerName := range g.Config.Providers {
		switch providerName {
		case "gcp":
			providerBlocks = append(providerBlocks, gcpProviderTemplate)
		// Add cases for other providers when supported
		default:
			return fmt.Errorf("unsupported provider: %s", providerName)
		}
	}
	
	content := fmt.Sprintf("# Generated by InfraSync\n\n%s", strings.Join(providerBlocks, "\n\n"))
	
	return os.WriteFile(filePath, []byte(content), 0644)
}

// generateMainTF creates the main.tf file
func (g *TerraformGenerator) generateMainTF() error {
	filePath := filepath.Join(g.OutputPath, "main.tf")
	
	content := mainTemplate
	
	return os.WriteFile(filePath, []byte(content), 0644)
}

// generateVariablesTF creates the variables.tf file
func (g *TerraformGenerator) generateVariablesTF() error {
	filePath := filepath.Join(g.OutputPath, "variables.tf")
	
	// Build variables for each provider/project
	var variableBlocks []string
	
	for providerName, provider := range g.Config.Providers {
		for _, project := range provider.Projects {
			varBlock := fmt.Sprintf(variableTemplate, 
				providerName, 
				project.ID, 
				providerName, 
				project.ID)
				
			variableBlocks = append(variableBlocks, varBlock)
		}
	}
	
	content := fmt.Sprintf("# Generated by InfraSync\n\n%s", strings.Join(variableBlocks, "\n\n"))
	
	return os.WriteFile(filePath, []byte(content), 0644)
}

// Template definitions
const (
	// Main template
	mainTemplate = `# Generated by InfraSync
# This file serves as the main entry point for this Terraform configuration

terraform {
  required_version = ">= 1.0.0"
  
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = ">= 4.0.0"
    }
    # Add other providers as needed
  }
}
`

	// Variable template
	variableTemplate = `variable "%s_%s_project" {
  description = "The %s project ID for %s"
  type        = string
}
`

	// GCP provider template
	gcpProviderTemplate = `provider "google" {
  # Project and region variables will be set per-provider per-project
}

variable "gcp_region" {
  description = "Default GCP region"
  type        = string
  default     = "us-central1"
}
`
)